Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"


class Solution {
public:
    vector<string> generateParenthesis(int n) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        ans.clear();
        if(n==0) return ans;

        dfs("", n, n);
        return ans;
    }
    
    void dfs(string str, int x, int y){
        if(x!=0){
            dfs(str+"(", x-1, y);
        }
        if(y!=0 && x<y){
            dfs(str+")", x, y-1);
        }
        if(x==0 && y==0){
            ans.push_back(str);
        }
    }
private:
    vector<string> ans;
};
